#ifndef charmaps_h
#define charmaps_h



void set_charmap(const Arg *a);


// assignments utf8->codepage
uint rev_cp[127]; 



// mappings of the codetables to unicode 
// enable or disable them in config.in
// only used tables will be compiled into the binary
// Other codepages can be found e.g. at 
// https://www.haible.de/bruno/charsets/conversion-tables/
// Currently, only the chars 0x80 - 0xff are mapped.
// This could be changed with the function convert in charmaps.c,
// and the macros "ISCONTROL" in termdraw would eventually
// need to changed (e.g. look for the current charmap, and return accordingly)

// CP1250 is nearly the same encoding, as the first page
// of unicode.
// Therefore using this encoding could work in many cases, without
// having to change configurations.
// At least with german umlauts, there wasn't any trouble anymore.
//
// CP437 has those box drawing characters, used
// by old tui interfaces.
//


// Another personal chartable.
// I name this cpalpha, 
// since I guess I'm going to do further changes.
// It has two advantages,
// German Umlauts are at the places of CP850,
// boxdrawing characters and some other chars there of cp437.
// (marked below)
// I added further quotation marks, Euro sign, logical characters, long vocals,..
//
// I decided to put greek into it's own chartable,
// which is selected by textattributes.
// The conversion uses the betacode,
// so greek text will be displayed "correct" also in other tools.
// About hyphens and diacrytics I'm uncertain yet,
// but this could also be done by latex.

// dehnungs vokale
// spitze klammern

static const unsigned short cpe4002a[] = { 
	//  euro ,   ue,    e acc,   a gr ,  ae   , a hyph, born  , death
/*80*/ 0x20ac,   0xfc,   0xe9,   0xe2,   0xe4,   0xe0, 0x2217, 0x2020,
       //                                          Aea, acc (quote)
       0x2200,0x2208,0x2209,0x2203,0x2204,0x27e8, 0xc4,0x2019,
       // Dbl quot low,up, single low,up, oe , double !,  ??,  !?
/*90*/ 0x201e, 0x201c, 0x201a, 0x2018,  0xf6,  0x203c, 0x2047, 0x2049,
	 // acc,    Oe,    Ue,    Cent,    Pound, Yen,   acc, F
       0x201d,   0xd6,   0xdc,   0xa2,   0xa3,   0xa5, 0xb4,  0x192,
	// accent a,i,o,u ,                  n N ,         Durchscbnitt, Paragr
/*A0*/   0xe1,   0xed,   0xf3,   0xfa,   0x2227,   0x2228, 0xd8  ,0xa7,
 // ques down, ungleich, not,
	      0xbf, 0x2260,   0xac,   0xbd,   0xbc,   0xb6,   0xab,   0xbb,

	// box drawing. same as cp437
/*B0*/ 0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
       0x2555, 0x2563, 0x2551, 0x2557, 0x255d, 0x255c, 0x255b, 0x2510,
       0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f, 
       0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,
       0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b,
       0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580, 
	  // math, cp437
	  // alpha, beta(sz), gamma(!small),
/*E0*/  0x3b1,   0xdf,  0x3b3,  0x3c0,  0x3a3,  0x3c3,   0xb5,  0x3c4,
        0x3a6,  0x398,  0x3a9,  0x3b4, 0x221e,  0x3c6,  0x3b5, 0x2229,
         //                                       *, div, circa,  
/*F0*/ 0x2261,   0xb1, 0x2265, 0x2264, 0x222b, 0xd7,   0xf7, 0x2248,

	//  degree,  dbl _,  dot,  radix,   exp(n), exp(2), overline, big delta
         0xb0, 0x2017, 0x2022, 0x221a, 0x207f,   0xb2, 0xaf, 0x2206,  // 0x95,
	//0x27f5, 0x2192, 0x27f6, 0x27f7, 0x27fa, 0x27ea, 0x27e8, 0x27e9, // tmp
	//0x2227, 0x2228, 0x2229, 0x222a (vereinigt), 0x22c2, 0x22c3, 0x22c6, 0x229b, // tmp
};


// A personal codepage. (Using Exxxx as number according to the rfc)
// This is a mix of cp 437 (box drawing chars), German Umlauts and sz,
// greek (greek alphabet), and several logical and mathematical
// operators and signs.
// (Need those for academical writings)
static const unsigned short cpe4000[] = { 
	/*euro Ä, Ö, Ü, ä,ae ö,oe ü,ue ß,sz */
	0x20ac, 0x00c4, 0x00d6, 0x00dc, 0x00e4, 0x00f6, 0x00fc, 0x00df,
	//+-,    div  , Radix ,  circa, not equ,Paragr., Grad,  Dbl Quot.low,
	0x00b1, 0x00f7, 0x0221, 0x2248, 0x2260, 0x00a7, 0x00b0, 0x0201e, 
// Dbl Quote up, single low, up, long a,e,i,o,u
	0x0201d, 0x201a, 0x219, 0x0100, 0x0112, 0x014c ,0x012a, 0x016a, 
   //Dehn: a,e,i,o,u                      Double !, ??, !?
	0x0101, 0x0113, 0x012b, 0x014d, 0x016b, 0x203c, 0x2047, 0x2049,
	// Greek Capitals
	0x0390/*xx*/, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
	0x0398, 0x0399, 0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f,
	0x03a0, 0x03a1, 0xfffd, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7,
	0x03a8, 0x03a9, /*lig*/ 0x03aa, 0x03ab, 0x03ac, 0x03ad, 0x03ae, 0x03af,
	// box drawing. same as cp437
	0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f, 
	0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b,
	0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580, 
	// greek small letters
	0x00e0/*xx*/,0x00e1,0x00e2,0x00e3,0x00e4,0x00e5,0x00e6,0x00e7,
	0x00e8,0x00e9,0x00ea,0x00eb,0x00ec,0x00ed,0x00ee,0x00ef,
	0x00f0,0x00f1,0x00f2,0x00f3,0x00f4,0x00f5,0x00f6,0x00f7,
	0x00f8,0x00f9,0x00fa,0x00fb,0x00fc,0x00fd,0x00fe,0x00a0,
};



static const unsigned short cp437[] = {
// 80
	  0xc7,  0xfc,  0xe9,  0xe2,  0xe4,  0xe0,  0xe5,  0xe7,
	  0xea,  0xeb,  0xe8,  0xef,  0xee,  0xec,  0xc4,  0xc5,
// 90
	  0xc9,  0xe6,  0xc6,  0xf4,  0xf6,  0xf2,  0xfb,  0xf9,
	  0xff,  0xd6,  0xdc,  0xa2,  0xa3,  0xa5,0x20a7, 0x192,
// A0
	  0xe1,  0xed,  0xf3,  0xfa,  0xf1,  0xd1,  0xaa,  0xba,
	  0xbf,0x2310,  0xac,  0xbd,  0xbc,  0xa1,  0xab,  0xbb,
// B0
	0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556, // box drawing
	0x2555,0x2563,0x2551,0x2557,0x255d,0x255c,0x255b,0x2510,
// C0
	0x2514,0x2534,0x252c,0x251c,0x2500,0x253c,0x255e,0x255f,
	0x255a,0x2554,0x2569,0x2566,0x2560,0x2550,0x256c,0x2567,
// D0
	0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256b,
	0x256a,0x2518,0x250c,0x2588,0x2584,0x258c,0x2590,0x2580, // end box drawing
// E0 
	 0x3b1,  0xdf, 0x393, 0x3c0, 0x3a3, 0x3c3,  0xb5, 0x3c4,
	 0x3a6, 0x398, 0x3a9, 0x3b4,0x221e, 0x3c6, 0x3b5,0x2229,
// F0
	0x2261,  0xb1,0x2265,0x2264,0x2320,0x2321,  0xf7,0x2248,
	  0xb0,0x2219,  0xb7,0x221a,0x207f,  0xb2,0x25a0,  0xa0,
};


static const unsigned short cp850[] = {
// 80
	  0xc7,  0xfc,  0xe9,  0xe2,  0xe4,  0xe0,  0xe5,  0xe7,
	  0xea,  0xeb,  0xe8,  0xef,  0xee,  0xec,  0xc4,  0xc5,
// 90
	  0xc9,  0xe6,  0xc6,  0xf4,  0xf6,  0xf2,  0xfb,  0xf9,
	  0xff,  0xd6,  0xdc,  0xf8,  0xa3,  0xd8,  0xd7, 0x192,
// A0
	  0xe1,  0xed,  0xf3,  0xfa,  0xf1,  0xd1,  0xaa,  0xba,
	  0xbf,  0xae,  0xac,  0xbd,  0xbc,  0xa1,  0xab,  0xbb,
// B0
	0x2591,0x2592,0x2593,0x2502,0x2524,  0xc1,  0xc2,  0xc0,
	  0xa9,0x2563,0x2551,0x2557,0x255d,  0xa2,  0xa5,0x2510,
// C0
	0x2514,0x2534,0x252c,0x251c,0x2500,0x253c,  0xe3,  0xc3,
	0x255a,0x2554,0x2569,0x2566,0x2560,0x2550,0x256c,  0xa4,
// D0
	  0xf0,  0xd0,  0xca,  0xcb,  0xc8, 0x131,  0xcd,  0xce,
	  0xcf,0x2518,0x250c,0x2588,0x2584,  0xa6,  0xcc,0x2580,
// E0
	  0xd3,  0xdf,  0xd4,  0xd2,  0xf5,  0xd5,  0xb5,  0xfe,
	  0xde,  0xda,  0xdb,  0xd9,  0xfd,  0xdd,  0xaf,  0xb4,
// F0
	  0xad,  0xb1,0x2017,  0xbe,  0xb6,  0xa7,  0xf7,  0xb8,
	  0xb0,  0xa8,  0xb7,  0xb9,  0xb3,  0xb2,0x25a0,  0xa0,
};


// this is ansi, dec-mcs, the first page of unicode, and windows 1252
static const unsigned short cp1252[] = {
// 80
	0x20ac,0xfffd,0x201a, 0x192,0x201e,0x2026,0x2020,0x2021,
	 0x2c6,0x2030, 0x160,0x2039, 0x152,0xfffd, 0x17d,0xfffd,
// 90
	0xfffd,0x2018,0x2019,0x201c,0x201d,0x2022,0x2013,0x2014,
	 0x2dc,0x2122, 0x161,0x203a, 0x153,0xfffd, 0x17e, 0x178,
// A0 - FF = 1 page of unicode
	  0xa0,  0xa1,  0xa2,  0xa3,  0xa4,  0xa5,  0xa6,  0xa7,
	  0xa8,  0xa9,  0xaa,  0xab,  0xac,  0xad,  0xae,  0xaf,
	  0xb0,  0xb1,  0xb2,  0xb3,  0xb4,  0xb5,  0xb6,  0xb7,
	  0xb8,  0xb9,  0xba,  0xbb,  0xbc,  0xbd,  0xbe,  0xbf,
	  0xc0,  0xc1,  0xc2,  0xc3,  0xc4,  0xc5,  0xc6,  0xc7,
	  0xc8,  0xc9,  0xca,  0xcb,  0xcc,  0xcd,  0xce,  0xcf,
	  0xd0,  0xd1,  0xd2,  0xd3,  0xd4,  0xd5,  0xd6,  0xd7,
	  0xd8,  0xd9,  0xda,  0xdb,  0xdc,  0xdd,  0xde,  0xdf,
	  0xe0,  0xe1,  0xe2,  0xe3,  0xe4,  0xe5,  0xe6,  0xe7,
	  0xe8,  0xe9,  0xea,  0xeb,  0xec,  0xed,  0xee,  0xef,
	  0xf0,  0xf1,  0xf2,  0xf3,  0xf4,  0xf5,  0xf6,  0xf7,
	  0xf8,  0xf9,  0xfa,  0xfb,  0xfc,  0xfd,  0xfe,  0xff,
};

// I don't know, if this is useful at all.
static const unsigned short iso8859_15[] = {
  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 
  0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 
  0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
  //
  0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0xa5, 0x00, 0xa7, /* 0xa0-0xa7 */
  0x00, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, /* 0xa8-0xaf */
  0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0xb5, 0xb6, 0xb7, /* 0xb0-0xb7 */
  0x00, 0xb9, 0xba, 0xbb, 0x00, 0x00, 0x00, 0xbf, /* 0xb8-0xbf */
// 
	  0xc0,  0xc1,  0xc2,  0xc3,  0xc4,  0xc5,  0xc6,  0xc7,
	  0xc8,  0xc9,  0xca,  0xcb,  0xcc,  0xcd,  0xce,  0xcf,
	  0xd0,  0xd1,  0xd2,  0xd3,  0xd4,  0xd5,  0xd6,  0xd7,
	  0xd8,  0xd9,  0xda,  0xdb,  0xdc,  0xdd,  0xde,  0xdf,
	  0xe0,  0xe1,  0xe2,  0xe3,  0xe4,  0xe5,  0xe6,  0xe7,
	  0xe8,  0xe9,  0xea,  0xeb,  0xec,  0xed,  0xee,  0xef,
	  0xf0,  0xf1,  0xf2,  0xf3,  0xf4,  0xf5,  0xf6,  0xf7,
	  0xf8,  0xf9,  0xfa,  0xfb,  0xfc,  0xfd,  0xfe,  0xff,
};




static const unsigned short cp1251[] = {
	0x0402, 0x0403, 0x201a, 0x0453, 0x201e, 0x2026, 0x2020, 0x2021,
	0x20ac, 0x2030, 0x0409, 0x2039, 0x040a, 0x040c, 0x040b, 0x040f,
	0x0452, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0xfffd, 0x2122, 0x0459, 0x203a, 0x045a, 0x045c, 0x045b, 0x045f,
	0x00a0, 0x040e, 0x045e, 0x0408, 0x00a4, 0x0490, 0x00a6, 0x00a7,
	0x0401, 0x00a9, 0x0404, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x0407,
	0x00b0, 0x00b1, 0x0406, 0x0456, 0x0491, 0x00b5, 0x00b6, 0x00b7,
	0x0451, 0x2116, 0x0454, 0x00bb, 0x0458, 0x0405, 0x0455, 0x0457,
	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
	0x0418, 0x0419, 0x041a, 0x041b, 0x041c, 0x041d, 0x041e, 0x041f,
	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
	0x0428, 0x0429, 0x042a, 0x042b, 0x042c, 0x042d, 0x042e, 0x042f,
	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
	0x0438, 0x0439, 0x043a, 0x043b, 0x043c, 0x043d, 0x043e, 0x043f,
	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
	0x0448, 0x0449, 0x044a, 0x044b, 0x044c, 0x044d, 0x044e, 0x044f,
};


static const unsigned short cp1250[] = {
	0x20ac,0xfffd,0x201a,0xfffd,0x201e,0x2026,0x2020,0x2021,
	0xfffd,0x2030, 0x160,0x2039, 0x15a, 0x164, 0x17d, 0x179,
	0xfffd,0x2018,0x2019,0x201c,0x201d,0x2022,0x2013,0x2014,
	0xfffd,0x2122, 0x161,0x203a, 0x15b, 0x165, 0x17e, 0x17a,
	  0xa0, 0x2c7, 0x2d8, 0x141,  0xa4, 0x104,  0xa6,  0xa7,
	  0xa8,  0xa9, 0x15e,  0xab,  0xac,  0xad,  0xae, 0x17b,
	  0xb0,  0xb1, 0x2db, 0x142,  0xb4,  0xb5,  0xb6,  0xb7,
	  0xb8, 0x105, 0x15f,  0xbb, 0x13d, 0x2dd, 0x13e, 0x17c,
	 0x154,  0xc1,  0xc2, 0x102,  0xc4, 0x139, 0x106,  0xc7,
	 0x10c,  0xc9, 0x118,  0xcb, 0x11a,  0xcd,  0xce, 0x10e,
	 0x110, 0x143, 0x147,  0xd3,  0xd4, 0x150,  0xd6,  0xd7,
	 0x158, 0x16e,  0xda, 0x170,  0xdc,  0xdd, 0x162,  0xdf,
	 0x155,  0xe1,  0xe2, 0x103,  0xe4, 0x13a, 0x107,  0xe7,
	 0x10d,  0xe9, 0x119,  0xeb, 0x11b,  0xed,  0xee, 0x10f,
	 0x111, 0x144, 0x148,  0xf3,  0xf4, 0x151,  0xf6,  0xf7,
	 0x159, 0x16f,  0xfa, 0x171,  0xfc,  0xfd, 0x163, 0x2d9,
};


static const unsigned short cp1253[] = {
	0x20ac, 0xfffd, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
	0xfffd, 0x2030, 0xfffd, 0x2039, 0xfffd, 0xfffd, 0xfffd, 0xfffd,
	0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0xfffd, 0x2122, 0xfffd, 0x203a, 0xfffd, 0xfffd, 0xfffd, 0xfffd,
	0x00a0, 0x0385, 0x0386, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
	0x00a8, 0x00a9, 0xfffd, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x2015,
	0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x0384, 0x00b5, 0x00b6, 0x00b7,
	0x0388, 0x0389, 0x038a, 0x00bb, 0x038c, 0x00bd, 0x038e, 0x038f,
	
	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
	0x0398, 0x0399, 0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f,
	0x03a0, 0x03a1, 0xfffd, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7,
	0x03a8, 0x03a9, 0x03aa, 0x03ab, 0x03ac, 0x03ad, 0x03ae, 0x03af,

	0x03b0, 0x03b1, 0x03b2, 0x03b3, 0x03b4, 0x03b5, 0x03b6, 0x03b7,
	0x03b8, 0x03b9, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03be, 0x03bf,
	0x03c0, 0x03c1, 0x03c2, 0x03c3, 0x03c4, 0x03c5, 0x03c6, 0x03c7,
	0x03c8, 0x03c9, 0x03ca, 0x03cb, 0x03cc, 0x03cd, 0x03ce, 0xfffd,
};


static const unsigned short cp1255[] = {
	0x20ac, 0xfffd, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
	0x02c6, 0x2030, 0xfffd, 0x2039, 0xfffd, 0xfffd, 0xfffd, 0xfffd,
	0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0x02dc, 0x2122, 0xfffd, 0x203a, 0xfffd, 0xfffd, 0xfffd, 0xfffd,
	0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x20aa, 0x00a5, 0x00a6, 0x00a7,
	0x00a8, 0x00a9, 0x00d7, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
	0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
	0x00b8, 0x00b9, 0x00f7, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
	0x05b0, 0x05b1, 0x05b2, 0x05b3, 0x05b4, 0x05b5, 0x05b6, 0x05b7,
	0x05b8, 0x05b9, 0x05ba, 0x05bb, 0x05bc, 0x05bd, 0x05be, 0x05bf,
	0x05c0, 0x05c1, 0x05c2, 0x05c3, 0x05f0, 0x05f1, 0x05f2, 0x05f3,
	0x05f4, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd,
	0x05d0, 0x05d1, 0x05d2, 0x05d3, 0x05d4, 0x05d5, 0x05d6, 0x05d7,
	0x05d8, 0x05d9, 0x05da, 0x05db, 0x05dc, 0x05dd, 0x05de, 0x05df,
	0x05e0, 0x05e1, 0x05e2, 0x05e3, 0x05e4, 0x05e5, 0x05e6, 0x05e7,
	0x05e8, 0x05e9, 0x05ea, 0xfffd, 0xfffd, 0x200e, 0x200f, 0xfffd,
};


static const unsigned short cp1256[] = {
	0x20ac, 0x067e, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
	0x02c6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
	0x06af, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0x06a9, 0x2122, 0x0691, 0x203a, 0x0153, 0x200c, 0x200d, 0x06ba,
	0x00a0, 0x060c, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
	0x00a8, 0x00a9, 0x06be, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
	0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
	0x00b8, 0x00b9, 0x061b, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x061f,
	0x06c1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
	0x0628, 0x0629, 0x062a, 0x062b, 0x062c, 0x062d, 0x062e, 0x062f,
	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00d7,
	0x0637, 0x0638, 0x0639, 0x063a, 0x0640, 0x0641, 0x0642, 0x0643,
	0x00e0, 0x0644, 0x00e2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00e7,
	0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x0649, 0x064a, 0x00ee, 0x00ef,
	0x064b, 0x064c, 0x064d, 0x064e, 0x00f4, 0x064f, 0x0650, 0x00f7,
	0x0651, 0x00f9, 0x0652, 0x00fb, 0x00fc, 0x200e, 0x200f, 0x06d2,
};


static const unsigned short cp1257[] = {
	0x20ac, 0xfffd, 0x201a, 0xfffd, 0x201e, 0x2026, 0x2020, 0x2021,
	0xfffd, 0x2030, 0xfffd, 0x2039, 0xfffd, 0x00a8, 0x02c7, 0x00b8,
	0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0xfffd, 0x2122, 0xfffd, 0x203a, 0xfffd, 0x00af, 0x02db, 0xfffd,
	0x00a0, 0xfffd, 0x00a2, 0x00a3, 0x00a4, 0xfffd, 0x00a6, 0x00a7,
	0x00d8, 0x00a9, 0x0156, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00c6,
	0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
	0x00f8, 0x00b9, 0x0157, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00e6,
	0x0104, 0x012e, 0x0100, 0x0106, 0x00c4, 0x00c5, 0x0118, 0x0112,
	0x010c, 0x00c9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012a, 0x013b,
	0x0160, 0x0143, 0x0145, 0x00d3, 0x014c, 0x00d5, 0x00d6, 0x00d7,
	0x0172, 0x0141, 0x015a, 0x016a, 0x00dc, 0x017b, 0x017d, 0x00df,
	0x0105, 0x012f, 0x0101, 0x0107, 0x00e4, 0x00e5, 0x0119, 0x0113,
	0x010d, 0x00e9, 0x017a, 0x0117, 0x0123, 0x0137, 0x012b, 0x013c,
	0x0161, 0x0144, 0x0146, 0x00f3, 0x014d, 0x00f5, 0x00f6, 0x00f7,
	0x0173, 0x0142, 0x015b, 0x016b, 0x00fc, 0x017c, 0x017e, 0x02d9,
};


static const unsigned short cp1258[] = {
	0x20ac, 0xfffd, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
	0x02c6, 0x2030, 0xfffd, 0x2039, 0x0152, 0xfffd, 0xfffd, 0xfffd,
	0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
	0x02dc, 0x2122, 0xfffd, 0x203a, 0x0153, 0xfffd, 0xfffd, 0x0178,
	0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
	0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
	0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
	0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
	0x00c0, 0x00c1, 0x00c2, 0x0102, 0x00c4, 0x00c5, 0x00c6, 0x00c7,
	0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x0300, 0x00cd, 0x00ce, 0x00cf,
	0x0110, 0x00d1, 0x0309, 0x00d3, 0x00d4, 0x01a0, 0x00d6, 0x00d7,
	0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x01af, 0x0303, 0x00df,
	0x00e0, 0x00e1, 0x00e2, 0x0103, 0x00e4, 0x00e5, 0x00e6, 0x00e7,
	0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x0301, 0x00ed, 0x00ee, 0x00ef,
	0x0111, 0x00f1, 0x0323, 0x00f3, 0x00f4, 0x01a1, 0x00f6, 0x00f7,
	0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x01b0, 0x20ab, 0x00ff,
};

// mac roman
static const unsigned short macintosh[] = {
  /* 0x80 */
  0x00c4, 0x00c5, 0x00c7, 0x00c9, 0x00d1, 0x00d6, 0x00dc, 0x00e1,
  0x00e0, 0x00e2, 0x00e4, 0x00e3, 0x00e5, 0x00e7, 0x00e9, 0x00e8,
  /* 0x90 */
  0x00ea, 0x00eb, 0x00ed, 0x00ec, 0x00ee, 0x00ef, 0x00f1, 0x00f3,
  0x00f2, 0x00f4, 0x00f6, 0x00f5, 0x00fa, 0x00f9, 0x00fb, 0x00fc,
  /* 0xa0 */
  0x2020, 0x00b0, 0x00a2, 0x00a3, 0x00a7, 0x2022, 0x00b6, 0x00df,
  0x00ae, 0x00a9, 0x2122, 0x00b4, 0x00a8, 0x2260, 0x00c6, 0x00d8,
  /* 0xb0 */
  0x221e, 0x00b1, 0x2264, 0x2265, 0x00a5, 0x00b5, 0x2202, 0x2211,
  0x220f, 0x03c0, 0x222b, 0x00aa, 0x00ba, 0x2126, 0x00e6, 0x00f8,
  /* 0xc0 */
  0x00bf, 0x00a1, 0x00ac, 0x221a, 0x0192, 0x2248, 0x2206, 0x00ab,
  0x00bb, 0x2026, 0x00a0, 0x00c0, 0x00c3, 0x00d5, 0x0152, 0x0153,
  /* 0xd0 */
  0x2013, 0x2014, 0x201c, 0x201d, 0x2018, 0x2019, 0x00f7, 0x25ca,
  0x00ff, 0x0178, 0x2044, 0x00a4, 0x2039, 0x203a, 0xfb01, 0xfb02,
  /* 0xe0 */
  0x2021, 0x00b7, 0x201a, 0x201e, 0x2030, 0x00c2, 0x00ca, 0x00c1,
  0x00cb, 0x00c8, 0x00cd, 0x00ce, 0x00cf, 0x00cc, 0x00d3, 0x00d4,
  /* 0xf0 */
  0xfffd, 0x00d2, 0x00da, 0x00db, 0x00d9, 0x0131, 0x02c6, 0x02dc,
  0x00af, 0x02d8, 0x02d9, 0x02da, 0x00b8, 0x02dd, 0x02db, 0x02c7,
};

static const unsigned short mac_centraleurope[] = {
	0x00c4, 0x0100, 0x0101, 0x00c9, 0x0104, 0x00d6, 0x00dc, 0x00e1,
	0x0105, 0x010c, 0x00e4, 0x010d, 0x0106, 0x0107, 0x00e9, 0x0179,
	0x017a, 0x010e, 0x00ed, 0x010f, 0x0112, 0x0113, 0x0116, 0x00f3,
	0x0117, 0x00f4, 0x00f6, 0x00f5, 0x00fa, 0x011a, 0x011b, 0x00fc,
	0x2020, 0x00b0, 0x0118, 0x00a3, 0x00a7, 0x2022, 0x00b6, 0x00df,
	0x00ae, 0x00a9, 0x2122, 0x0119, 0x00a8, 0x2260, 0x0123, 0x012e,
	0x012f, 0x012a, 0x2264, 0x2265, 0x012b, 0x0136, 0x2202, 0x2211,
	0x0142, 0x013b, 0x013c, 0x013d, 0x013e, 0x0139, 0x013a, 0x0145,
	0x0146, 0x0143, 0x00ac, 0x221a, 0x0144, 0x0147, 0x2206, 0x00ab,
	0x00bb, 0x2026, 0x00a0, 0x0148, 0x0150, 0x00d5, 0x0151, 0x014c,
	0x2013, 0x2014, 0x201c, 0x201d, 0x2018, 0x2019, 0x00f7, 0x25ca,
	0x014d, 0x0154, 0x0155, 0x0158, 0x2039, 0x203a, 0x0159, 0x0156,
	0x0157, 0x0160, 0x201a, 0x201e, 0x0161, 0x015a, 0x015b, 0x00c1,
	0x0164, 0x0165, 0x00cd, 0x017d, 0x017e, 0x016a, 0x00d3, 0x00d4,
	0x016b, 0x016e, 0x00da, 0x016f, 0x0170, 0x0171, 0x0172, 0x0173,
	0x00dd, 0x00fd, 0x0137, 0x017b, 0x0141, 0x017c, 0x0122, 0x02c7,
};

static const unsigned short atarist[128] = {
  /* 0x80 */
  0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7,
  0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5,
  /* 0x90 */
  0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9,
  0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5, 0x00df, 0x0192,
  /* 0xa0 */
  0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba,
  0x00bf, 0x2310, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,
  /* 0xb0 */
  0x00e3, 0x00f5, 0x00d8, 0x00f8, 0x0153, 0x0152, 0x00c0, 0x00c3,
  0x00d5, 0x00a8, 0x00b4, 0x2020, 0x00b6, 0x00a9, 0x00ae, 0x2122,
  /* 0xc0 */
  0x0133, 0x0132, 0x05d0, 0x05d1, 0x05d2, 0x05d3, 0x05d4, 0x05d5,
  0x05d6, 0x05d7, 0x05d8, 0x05d9, 0x05db, 0x05dc, 0x05de, 0x05e0,
  /* 0xd0 */
  0x05e1, 0x05e2, 0x05e4, 0x05e6, 0x05e7, 0x05e8, 0x05e9, 0x05ea,
  0x05df, 0x05da, 0x05dd, 0x05e3, 0x05e5, 0x00a7, 0x2227, 0x221e,
  /* 0xe0 */
  0x03b1, 0x03b2, 0x0393, 0x03c0, 0x03a3, 0x03c3, 0x00b5, 0x03c4,
  0x03a6, 0x0398, 0x03a9, 0x03b4, 0x222e, 0x03c6, 0x2208, 0x2229,
  /* 0xf0 */
  0x2261, 0x00b1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248,
  0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2, 0x00b3, 0x00af,
};


#if 0
static const unsigned short cp1254[] = {
  /* 0x80 */
  0x20ac, 0xfffd, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
  0x02c6, 0x2030, 0x0160, 0x2039, 0x0152, 0xfffd, 0xfffd, 0xfffd,
  /* 0x90 */
  0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
  0x02dc, 0x2122, 0x0161, 0x203a, 0x0153, 0xfffd, 0xfffd, 0x0178,
  0x00, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, /* 0xd0-0xd7 */
  0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0x00, 0x00, 0xdf, /* 0xd8-0xdf */
  0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, /* 0xe0-0xe7 */
  0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, /* 0xe8-0xef */
  0x00, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, /* 0xf0-0xf7 */
  0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0x00, 0x00, 0xff, /* 0xf8-0xff */
#endif


#endif
